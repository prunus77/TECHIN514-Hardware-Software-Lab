#include <Arduino.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>
#include <stdlib.h>


BLEServer* pServer = NULL;
BLECharacteristic* pCharacteristic = NULL;
bool deviceConnected = false;
bool oldDeviceConnected = false;
unsigned long previousMillis = 0;
const long interval = 1000;


// TODO: add new global variables for your sensor readings and processed data


// TODO: Change the UUID to your own (any specific one works, but make sure they're different from others'). You can generate one here: https://www.uuidgenerator.net/
#define SERVICE_UUID        "f1cdd5ff-705e-4db8-97a4-81e9f7aa2af1"
#define CHARACTERISTIC_UUID "22a26494-e5ef-4b30-9542-da5b9ed7017b"


class MyServerCallbacks : public BLEServerCallbacks {
   void onConnect(BLEServer* pServer) {
       deviceConnected = true;
   };


   void onDisconnect(BLEServer* pServer) {
       deviceConnected = false;
   }
};


// TODO: add DSP algorithm functions here


void setup() {
   Serial.begin(115200);
   Serial.println("Starting BLE work!");


   // TODO: add codes for handling your sensor setup (pinMode, etc.)


   // TODO: name your device to avoid conflictions
   BLEDevice::init("XIAO_ESP32S3_Server_Cherry");
   pServer = BLEDevice::createServer();
   pServer->setCallbacks(new MyServerCallbacks());
   BLEService *pService = pServer->createService(SERVICE_UUID);
   pCharacteristic = pService->createCharacteristic(
       CHARACTERISTIC_UUID,
       BLECharacteristic::PROPERTY_READ |
       BLECharacteristic::PROPERTY_WRITE |
       BLECharacteristic::PROPERTY_NOTIFY
   );
   pCharacteristic->addDescriptor(new BLE2902());
   pCharacteristic->setValue("Hello World");
   pService->start();
   // BLEAdvertising *pAdvertising = pServer->getAdvertising();  // this still is working for backward compatibility
   BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
   pAdvertising->addServiceUUID(SERVICE_UUID);
   pAdvertising->setScanResponse(true);
   pAdvertising->setMinPreferred(0x06);  // functions that help with iPhone connections issue
   pAdvertising->setMinPreferred(0x12);
   BLEDevice::startAdvertising();
   Serial.println("Characteristic defined! Now you can read it in your phone!");
}


void loop() {
   // TODO: add codes for handling your sensor readings (analogRead, etc.)


   // TODO: use your defined DSP algorithm to process the readings


  
   if (deviceConnected) {
       // Send new readings to database
       // TODO: change the following code to send your own readings and processed data
       unsigned long currentMillis = millis();
       if (currentMillis - previousMillis >= interval) {
       pCharacteristic->setValue("Hello World from XIAO_ESP32S3_Server_Cherry");
       pCharacteristic->notify();
       Serial.println("Notify value: Hello World from XIAO_ESP32S3_Server_Cherry");
       }
   }
   // disconnecting
   if (!deviceConnected && oldDeviceConnected) {
       delay(500);  // give the bluetooth stack the chance to get things ready
       pServer->startAdvertising();  // advertise again
       Serial.println("Start advertising");
       oldDeviceConnected = deviceConnected;
   }
   // connecting
   if (deviceConnected && !oldDeviceConnected) {
       // do stuff here on connecting
       oldDeviceConnected = deviceConnected;
   }
   delay(1000);
}

